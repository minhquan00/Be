#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
3.py (s·ª≠a) - Scrape t·ª´ API list c·ªßa b·∫°n + ki·ªÉm tra proxy (HTTP/HTTPS only) -> l∆∞u g·ªôp vn.txt cho by.js
- Lo·∫°i b·ªè SOCKS
- Chu·∫©n h√≥a proxy th√†nh host:port
- N·∫øu proxy tr·∫£ l·ªùi ƒë∆∞·ª£c HTTP ho·∫∑c HTTPS (qua proxy), s·∫Ω ghi v√†o vn.txt
- Ghi th√™m th√¥ng tin t√≥m t·∫Øt: latency v√† protocls passed
"""

import requests
from concurrent.futures import ThreadPoolExecutor, as_completed
import threading
import os
import warnings
import re
import time

# ---------- C·∫•u h√¨nh ----------
VN_OUTPUT = "vn.txt"
BAD_OUTPUT = "bad_vn.txt"
lock = threading.Lock()

# T·∫Øt c·∫£nh b√°o SSL khi verify=False
warnings.filterwarnings("ignore", message="Unverified HTTPS request")

API_VN = [
    "https://openproxylist.xyz/http.txt",
    "https://openproxylist.xyz/https.txt",
    "http://36.50.134.20:3000/download/http.txt",
    "http://36.50.134.20:3000/download/vn.txt",
    "http://36.50.134.20:3000/api/proxies",
    "https://api.lumiproxy.com/web_v1/free-proxy/list?page_size=60&page=1&protocol=1&language=en-us",
    "https://api.lumiproxy.com/web_v1/free-proxy/list?page_size=60&page=1&protocol=2&speed=2&uptime=0&language=en-us",
    "http://pubproxy.com/api/proxy?limit=20&format=txt&type=http",
    "http://pubproxy.com/api/proxy?limit=20&format=txt&type=https",
    "https://cdn.jsdelivr.net/gh/proxifly/free-proxy-list@main/proxies/all/data.txt",
]

# Timeouts v√† thread m·∫∑c ƒë·ªãnh
TIMEOUT_HTTP = 4   # gi√¢y cho request HTTP test
TIMEOUT_HTTPS = 6  # gi√¢y cho request HTTPS test (th∆∞·ªùng l√¢u h∆°n)
MAX_WORKERS = 40   # thread pool size

# ---------- Helper functions ----------
def normalize_line(line):
    """Chuy·ªÉn 1 d√≤ng proxy th√†nh host:port ho·∫∑c return None (n·∫øu l·ªói / socks)"""
    if not line:
        return None
    s = line.strip()
    s = s.split()[0]  # drop trailing comments
    s = s.strip()

    # Lo·∫°i b·ªè quotes
    s = s.strip('\'"')

    # Lower-case scheme check
    l = s.lower()

    # Lo·∫°i b·ªè socks
    if l.startswith("socks") or "socks" in l:
        return None

    # N·∫øu c√≥ schema nh∆∞ http:// ho·∫∑c https:// -> parse l·∫•y netloc
    m = re.match(r'^(https?://)?(.+)$', s)
    if m:
        core = m.group(2)
    else:
        core = s

    # N·∫øu c√≥ user:pass@host:port -> l·∫•y ph·∫ßn sau @
    if "@" in core:
        core = core.split("@", 1)[1]

    # N·∫øu v·∫´n c√≥ slash (path), b·ªè path
    if "/" in core:
        core = core.split("/")[0]

    # IPv6 support in basic way: if contains [ ] or multiple :
    # We'll accept anything that contains ":" and last segment numeric port
    if ":" not in core:
        return None
    parts = core.rsplit(":", 1)
    host = parts[0]
    port = parts[1]
    if not port.isdigit():
        return None
    return f"{host}:{port}"

def fetch_proxies_vn():
    """L·∫•y proxy raw t·ª´ API_VN, tr·∫£ v·ªÅ set c√°c d√≤ng ƒë√£ chu·∫©n h√≥a (host:port)"""
    all_proxies = set()
    for i, url in enumerate(API_VN, 1):
        try:
            print(f"üì° L·∫•y API {i}/{len(API_VN)}: {url}")
            res = requests.get(url, timeout=6)
            if res.status_code != 200:
                print(f"  ‚ùå Status {res.status_code}")
                continue
            text = res.text
            lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
            parsed = 0
            for ln in lines:
                norm = normalize_line(ln)
                if norm:
                    all_proxies.add(norm)
                    parsed += 1
            print(f"  ‚ûú L·∫•y ƒë∆∞·ª£c {parsed} proxy h·ª£p l·ªá t·ª´ ngu·ªìn #{i}")
        except Exception as e:
            print(f"  ‚ùå L·ªói khi l·∫•y ngu·ªìn #{i}: {e}")
    print(f"üì• T·ªïng proxy (sau chu·∫©n h√≥a, lo·∫°i socks): {len(all_proxies)}")
    return list(all_proxies)

# Check b·∫±ng requests qua proxy (http proxy d√πng cho c·∫£ http v√† https b·∫±ng d·∫°ng http://host:port)
def check_proxy(proxy_hostport, timeout_http=TIMEOUT_HTTP, timeout_https=TIMEOUT_HTTPS):
    """
    Ki·ªÉm tra proxy:
      - proxy_hostport: "host:port"
    Tr·∫£ v·ªÅ tuple:
      (hostport, ok_bool, info_str)
    N·∫øu ok_bool True -> info_str c√≥ d·∫°ng "http,https lat=XXms" ho·∫∑c "http lat=XXms" ho·∫∑c "https lat=YYms"
    N·∫øu False -> info_str l√† l√Ω do fail
    """
    hostport = proxy_hostport
    proxies = {
        "http": f"http://{hostport}",
        "https": f"http://{hostport}"
    }
    protocols = []
    latencies = []
    # Test HTTP endpoint
    t0 = time.time()
    try:
        r = requests.get("http://httpbin.org/ip", proxies=proxies, timeout=timeout_http)
        lat = int((time.time() - t0) * 1000)
        if r.status_code == 200:
            protocols.append("http")
            latencies.append(lat)
    except Exception as e:
        # kh√¥ng sao, th·ª≠ HTTPS ti·∫øp
        pass

    # Test HTTPS endpoint (ƒë·∫∑t verify=False cho tr√°nh l·ªói cert qua proxy public)
    t1 = time.time()
    try:
        r = requests.get("https://httpbin.org/ip", proxies=proxies, timeout=timeout_https, verify=False)
        lat2 = int((time.time() - t1) * 1000)
        if r.status_code == 200:
            protocols.append("https")
            latencies.append(lat2)
    except Exception as e:
        pass

    if protocols:
        # ch·ªçn latency min ƒë·ªÉ ghi
        latency = min(latencies) if latencies else 0
        info = f"{','.join(protocols)} lat={latency}ms"
        return (hostport, True, info)
    else:
        return (hostport, False, "no-protocol-ok")

def write_result_line(path, line):
    with lock:
        with open(path, "a") as f:
            f.write(line + "\n")

def run_check_all(proxy_list, workers=MAX_WORKERS):
    # X√≥a file output n·∫øu t·ªìn t·∫°i
    if os.path.exists(VN_OUTPUT):
        os.remove(VN_OUTPUT)
    if os.path.exists(BAD_OUTPUT):
        os.remove(BAD_OUTPUT)

    total = len(proxy_list)
    checked = 0
    live = 0
    print(f"‚öôÔ∏è B·∫Øt ƒë·∫ßu ki·ªÉm tra {total} proxy v·ªõi {workers} lu·ªìng...")
    with ThreadPoolExecutor(max_workers=workers) as ex:
        futures = { ex.submit(check_proxy, p): p for p in proxy_list }
        for fut in as_completed(futures):
            p = futures[fut]
            try:
                hostport, ok, info = fut.result()
            except Exception as e:
                hostport, ok, info = p, False, f"exception:{e}"
            checked += 1
            if ok:
                live += 1
                line = f"{hostport} # {info}"
                write_result_line(VN_OUTPUT, line)
            else:
                line = f"{hostport} # {info}"
                write_result_line(BAD_OUTPUT, line)
            # in ti·∫øn tr√¨nh (same-line)
            print(f"‚úÖ {checked}/{total} checked | Live: {live}", end="\r", flush=True)

    print()  # newline
    print(f"üîî Ho√†n t·∫•t ki·ªÉm tra. Live: {live} / {total}")
    print(f"üìÇ L∆∞u file s·ªëng: {VN_OUTPUT}")
    print(f"üìÇ L∆∞u file ch·∫øt: {BAD_OUTPUT}")

# ---------- Main ----------
if __name__ == "__main__":
    print("üöÄ ƒêang l·∫•y danh s√°ch proxy t·ª´ API ...")
    proxies = fetch_proxies_vn()
    if not proxies:
        print("‚ùå Kh√¥ng c√≥ proxy n√†o ƒë·ªÉ ki·ªÉm tra. Tho√°t.")
        exit(1)

    # N·∫øu b·∫°n mu·ªën d√πng file proxy c√≥ s·∫µn (proxy.txt), b·∫°n c√≥ th·ªÉ uncomment d√≤ng sau:
    # with open("proxy.txt") as f: proxies = [normalize_line(l) for l in f if normalize_line(l)]

    # B·∫Øt ƒë·∫ßu check
    run_check_all(proxies, workers=MAX_WORKERS)
